# –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ 1: –ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ
# –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
from sklearn.impute import SimpleImputer
import warnings
warnings.filterwarnings('ignore')

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Ñ–∞–π–ª —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω)
# !gdown 1yQgwqFxwkHtZL2PZ2waF4Pg3Sb9hyHo9
# df = pd.read_csv('df_with_nan.csv')

# –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–¥–∏–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–æ–ø—É—Å–∫–∞–º–∏
# –í —Ä–µ–∞–ª—å–Ω–æ–º —Ä–µ—à–µ–Ω–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
np.random.seed(42)
n_samples = 20640

# –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ—Ö–æ–∂–∏–µ –Ω–∞ California Housing dataset
data = {
    'MedInc': np.random.normal(6.0, 2.0, n_samples),
    'HouseAge': np.random.uniform(1, 52, n_samples),
    'AveRooms': np.random.normal(6.0, 2.0, n_samples),
    'AveBedrms': np.random.normal(1.0, 0.5, n_samples),
    'Population': np.random.uniform(3, 35000, n_samples),
    'AveOccup': np.random.normal(3.0, 2.0, n_samples)
}

df = pd.DataFrame(data)
# –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
df['Target'] = (df['MedInc'] * 0.4 + 
                df['AveRooms'] * 0.1 - 
                df['HouseAge'] * 0.01 + 
                np.random.normal(0, 0.5, n_samples))

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º
missing_mask = np.random.random(df.shape) < 0.05  # 5% –ø—Ä–æ–ø—É—Å–∫–æ–≤
df = df.mask(missing_mask)

print("="*60)
print("–î–û–ú–ê–®–ù–Ø–Ø –†–ê–ë–û–¢–ê 1: –ú–ê–®–ò–ù–ù–û–ï –û–ë–£–ß–ï–ù–ò–ï")
print("–¢–ï–ú–ê: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
print("="*60)

# ==========================================
# 1. –†–ê–ó–í–ï–î–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–• (EDA)
# ==========================================

print("\n" + "="*50)
print("1. –†–ê–ó–í–ï–î–û–ß–ù–´–ô –ê–ù–ê–õ–ò–ó –î–ê–ù–ù–´–•")
print("="*50)

# –†–∞–∑–º–µ—Ä –¥–∞—Ç–∞—Å–µ—Ç–∞
print("\nüìä –†–ê–ó–ú–ï–† –î–ê–¢–ê–°–ï–¢–ê:")
print(f"–†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {df.memory_usage(deep=True).sum() / (1024**3):.6f} –ì–ë")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {df.shape[0]:,}")
print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {df.shape[1]}")

# –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
X = df.drop('Target', axis=1)
y = df['Target']

# –ê–Ω–∞–ª–∏–∑ —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
print("\nüìà –°–¢–ê–¢–ò–°–¢–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–ò–ó–ù–ê–ö–û–í:")
print("-" * 80)
stats_df = pd.DataFrame({
    '–ü—Ä–∏–∑–Ω–∞–∫': X.columns,
    '–ú–∏–Ω–∏–º—É–º': X.min().values,
    '–ú–∞–∫—Å–∏–º—É–º': X.max().values,
    '–°—Ä–µ–¥–Ω–µ–µ': X.mean().values,
    '–ú–µ–¥–∏–∞–Ω–∞': X.median().values,
    '–°—Ç–¥. –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ': X.std().values
})
print(stats_df.round(3).to_string(index=False))

# –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–ø—É—Å–∫–æ–≤
print("\nüîç –ê–ù–ê–õ–ò–ó –ü–†–û–ü–£–°–ö–û–í:")
print("-" * 40)
missing_info = pd.DataFrame({
    '–ü—Ä–∏–∑–Ω–∞–∫': df.columns,
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤': df.isnull().sum().values,
    '–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–ø—É—Å–∫–æ–≤': (df.isnull().sum() / len(df) * 100).values
})
missing_info = missing_info[missing_info['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–ø—É—Å–∫–æ–≤'] > 0]
if len(missing_info) > 0:
    print(missing_info.round(2).to_string(index=False))
else:
    print("–ü—Ä–æ–ø—É—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")

# ==========================================
# 2. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–• –ù–ê –¢–†–ï–ô–ù –ò –¢–ï–°–¢
# ==========================================

print("\n" + "="*50)
print("2. –†–ê–ó–î–ï–õ–ï–ù–ò–ï –î–ê–ù–ù–´–•")
print("="*50)

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42
)

print(f"–†–∞–∑–º–µ—Ä –æ–±—É—á–∞—é—â–µ–π –≤—ã–±–æ—Ä–∫–∏: {X_train.shape[0]:,} –æ–±—Ä–∞–∑—Ü–æ–≤")
print(f"–†–∞–∑–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–π –≤—ã–±–æ—Ä–∫–∏: {X_test.shape[0]:,} –æ–±—Ä–∞–∑—Ü–æ–≤")

# ==========================================
# 3. –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ü–£–°–ö–û–í
# ==========================================

print("\n" + "="*50)
print("3. –ü–û–î–ì–û–¢–û–í–ö–ê –î–ê–ù–ù–´–• –ö –û–ë–£–ß–ï–ù–ò–Æ")
print("="*50)

print("\nüîß –û–ë–†–ê–ë–û–¢–ö–ê –ü–†–û–ü–£–°–ö–û–í:")

# –°–ø–æ—Å–æ–± 1: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
print("\n1Ô∏è‚É£ –°–ü–û–°–û–ë 1: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º")
print("   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ü—Ä–æ—Å—Ç–æ–π –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è —á–∏—Å–ª–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö,")
print("   –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –æ–±—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ.")

imputer_mean = SimpleImputer(strategy='mean')
X_train_mean = pd.DataFrame(
    imputer_mean.fit_transform(X_train),
    columns=X_train.columns,
    index=X_train.index
)
X_test_mean = pd.DataFrame(
    imputer_mean.transform(X_test),
    columns=X_test.columns,
    index=X_test.index
)

# –°–ø–æ—Å–æ–± 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π
print("\n2Ô∏è‚É£ –°–ü–û–°–û–ë 2: –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π")
print("   –û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ: –ë–æ–ª–µ–µ —É—Å—Ç–æ–π—á–∏–≤ –∫ –≤—ã–±—Ä–æ—Å–∞–º, —á–µ–º —Å—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ,")
print("   –ª—É—á—à–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –¥–∞–Ω–Ω—ã—Ö —Å –∞—Å–∏–º–º–µ—Ç—Ä–∏—á–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.")

imputer_median = SimpleImputer(strategy='median')
X_train_median = pd.DataFrame(
    imputer_median.fit_transform(X_train),
    columns=X_train.columns,
    index=X_train.index
)
X_test_median = pd.DataFrame(
    imputer_median.transform(X_test),
    columns=X_test.columns,
    index=X_test.index
)

# ==========================================
# 4. –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô
# ==========================================

print("\n" + "="*50)
print("4. –ü–û–°–¢–†–û–ï–ù–ò–ï –ú–û–î–ï–õ–ï–ô –ú–ê–®–ò–ù–ù–û–ì–û –û–ë–£–ß–ï–ù–ò–Ø")
print("="*50)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –º–æ–¥–µ–ª–∏
def evaluate_model(y_true, y_pred, model_name):
    mse = mean_squared_error(y_true, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_true, y_pred)
    r2 = r2_score(y_true, y_pred)
    
    return {
        '–ú–æ–¥–µ–ª—å': model_name,
        'MSE': mse,
        'RMSE': rmse,
        'MAE': mae,
        'R¬≤': r2
    }

results = []

# –ú–æ–¥–µ–ª—å 1: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º —Å—Ä–µ–¥–Ω–∏–º
print("\nü§ñ –ú–û–î–ï–õ–¨ 1: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è + –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º")
lr_mean = LinearRegression()
lr_mean.fit(X_train_mean, y_train)
y_pred_mean = lr_mean.predict(X_test_mean)
results.append(evaluate_model(y_test, y_pred_mean, "LinearRegression + Mean"))

# –ú–æ–¥–µ–ª—å 2: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è —Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º –º–µ–¥–∏–∞–Ω–æ–π
print("ü§ñ –ú–û–î–ï–õ–¨ 2: –õ–∏–Ω–µ–π–Ω–∞—è —Ä–µ–≥—Ä–µ—Å—Å–∏—è + –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π")
lr_median = LinearRegression()
lr_median.fit(X_train_median, y_train)
y_pred_median = lr_median.predict(X_test_median)
results.append(evaluate_model(y_test, y_pred_median, "LinearRegression + Median"))

# ==========================================
# 5. –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ï–ô
# ==========================================

print("\n" + "="*50)
print("5. –û–¶–ï–ù–ö–ê –ö–ê–ß–ï–°–¢–í–ê –ú–û–î–ï–õ–ï–ô")
print("="*50)

results_df = pd.DataFrame(results)
print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –û–¶–ï–ù–ö–ò –ú–û–î–ï–õ–ï–ô:")
print("-" * 70)
print(results_df.round(4).to_string(index=False))

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–µ–π –º–æ–¥–µ–ª–∏
best_model_idx = results_df['R¬≤'].idxmax()
best_model = results_df.iloc[best_model_idx]

print(f"\nüèÜ –õ–£–ß–®–ê–Ø –ú–û–î–ï–õ–¨: {best_model['–ú–æ–¥–µ–ª—å']}")
print(f"   R¬≤ Score: {best_model['R¬≤']:.4f}")
print(f"   RMSE: {best_model['RMSE']:.4f}")

# ==========================================
# 6. –ê–ù–ê–õ–ò–ó –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í
# ==========================================

print("\n" + "="*50)
print("6. –ê–ù–ê–õ–ò–ó –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í –õ–£–ß–®–ï–ô –ú–û–î–ï–õ–ò")
print("="*50)

# –í—ã–±–∏—Ä–∞–µ–º –ª—É—á—à—É—é –º–æ–¥–µ–ª—å
if best_model['–ú–æ–¥–µ–ª—å'] == "LinearRegression + Mean":
    best_lr_model = lr_mean
    feature_names = X_train_mean.columns
else:
    best_lr_model = lr_median
    feature_names = X_train_median.columns

coefficients_df = pd.DataFrame({
    '–ü—Ä–∏–∑–Ω–∞–∫': feature_names,
    '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç': best_lr_model.coef_,
    '–í–∞–∂–Ω–æ—Å—Ç—å': np.abs(best_lr_model.coef_)
}).sort_values('–í–∞–∂–Ω–æ—Å—Ç—å', ascending=False)

print("\nüìà –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ –ú–û–î–ï–õ–ò:")
print("-" * 40)
print(coefficients_df.round(4).to_string(index=False))
print(f"\n–°–≤–æ–±–æ–¥–Ω—ã–π —á–ª–µ–Ω (intercept): {best_lr_model.intercept_:.4f}")

# ==========================================
# 7. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
# ==========================================

print("\n" + "="*60)
print("7. –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò")
print("="*60)

print("\nüìã –û–°–ù–û–í–ù–´–ï –í–´–í–û–î–´:")
print("-" * 30)

print(f"""
1. üìä –†–ê–ó–ú–ï–† –î–ê–ù–ù–´–•:
   ‚Ä¢ –î–∞—Ç–∞—Å–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç {df.shape[0]:,} –∑–∞–ø–∏—Å–µ–π –∏ {df.shape[1]} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
   ‚Ä¢ –†–∞–∑–º–µ—Ä –≤ –ø–∞–º—è—Ç–∏: {df.memory_usage(deep=True).sum() / (1024**3):.6f} –ì–ë

2. üîç –ü–†–û–ü–£–°–ö–ò –í –î–ê–ù–ù–´–•:
   ‚Ä¢ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–ø—É—Å–∫–∏ –≤ {missing_info.shape[0] if len(missing_info) > 0 else 0} –ø—Ä–∏–∑–Ω–∞–∫–∞—Ö
   ‚Ä¢ –ü—Ä–∏–º–µ–Ω–µ–Ω—ã –¥–≤–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: —Å—Ä–µ–¥–Ω–µ–µ –∏ –º–µ–¥–∏–∞–Ω–∞

3. ü§ñ –ö–ê–ß–ï–°–¢–í–û –ú–û–î–ï–õ–ï–ô:
   ‚Ä¢ –õ—É—á—à–∞—è –º–æ–¥–µ–ª—å: {best_model['–ú–æ–¥–µ–ª—å']}
   ‚Ä¢ R¬≤ Score: {best_model['R¬≤']:.4f} (–æ–±—ä—è—Å–Ω—è–µ—Ç {best_model['R¬≤']*100:.1f}% –¥–∏—Å–ø–µ—Ä—Å–∏–∏)
   ‚Ä¢ RMSE: {best_model['RMSE']:.4f}

4. üìà –í–ê–ñ–ù–´–ï –ü–†–ò–ó–ù–ê–ö–ò:
   ‚Ä¢ –ù–∞–∏–±–æ–ª–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–π: {coefficients_df.iloc[0]['–ü—Ä–∏–∑–Ω–∞–∫']} (–∫–æ—ç—Ñ. {coefficients_df.iloc[0]['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']:.4f})
   ‚Ä¢ –ù–∞–∏–º–µ–Ω–µ–µ –≤–ª–∏—è—Ç–µ–ª—å–Ω—ã–π: {coefficients_df.iloc[-1]['–ü—Ä–∏–∑–Ω–∞–∫']} (–∫–æ—ç—Ñ. {coefficients_df.iloc[-1]['–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç']:.4f})
""")

print("\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("-" * 20)

recommendation = "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏–º" if "Mean" in best_model['–ú–æ–¥–µ–ª—å'] else "–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –º–µ–¥–∏–∞–Ω–æ–π"
print(f"""
‚Ä¢ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª—å LinearRegression —Å –º–µ—Ç–æ–¥–æ–º "{recommendation}"
‚Ä¢ –ü—Ä–∏—á–∏–Ω—ã –≤—ã–±–æ—Ä–∞:
  - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–∏–ª—É—á—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ –ø–æ –º–µ—Ç—Ä–∏–∫–µ R¬≤ ({best_model['R¬≤']:.4f})
  - –ò–º–µ–µ—Ç –Ω–∞–∏–º–µ–Ω—å—à—É—é –æ—à–∏–±–∫—É RMSE ({best_model['RMSE']:.4f})
  - –ü—Ä–æ—Å—Ç–∞—è –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–∞—è –º–æ–¥–µ–ª—å
  
‚Ä¢ –î–∞–ª—å–Ω–µ–π—à–∏–µ —É–ª—É—á—à–µ–Ω–∏—è:
  - –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–ª–∏–Ω–æ–º–∏–∞–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
  - –ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ä–µ–≥—É–ª—è—Ä–∏–∑–∞—Ü–∏—é (Ridge, Lasso)
  - –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ–ø—É—Å–∫–æ–≤
""")

print("\n" + "="*60)
print("–ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ‚úÖ")
print("="*60)